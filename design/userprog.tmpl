             +--------------------------+
             | CSCC69                   |
             | PROJECT 2: USER PROGRAMS	|
             | DESIGN DOCUMENT          |
             +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

               ARGUMENT PASSING
               ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
#define USER_STACK (PHYS_BASE - 4)
#define ARG_MAX 32
#define DELIMITER " "

struct thread_params
  {
    char *name;
    char *args;
    tid_t parent;
    struct semaphore started;
    bool success;
  };


---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
1. filename에서 프로그램 이름과 실행 인자를 분리합니다. (name, args)
2. 전체 실행 인자를 각각 분리해서 argv 배열에 하나씩 저장합니다.
3. user stack에 argv 배열의 마지막 원소부터 첫 번째 원소까지 복사합니다. (argv[i])
4. user stack에 저장된 첫 번째 인자의 주소를 user stack에 저장합니다. (argv)
5. user stack에 실행 인자 개수를 저장합니다.
6. user stack에 복귀 주소를 저장합니다. (복귀 주소가 필요하지는 않지만 규칙을 맞추기 위해서 가짜 복귀 주소를 넣음)

>> How do you avoid overflowing the stack page?
실행 인자 최대 개수를 설정해서 스택을 넘치지 않도록 합니다. (현재 구현에서는 4kb를 넘치 않도록 개수를 설정)

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?
strtok 함수는 내부적으로 정적 변수를 사용하기 때문에 스레드 안정성이 없습니다. strtok_r은 반환 매개 변수로
분리된 문자열을 반환하기 때문에 스레드 안정성이 있습니다.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.
1. redirection, pipe 등과 같은 다른 프로그램과 연동할 수 있습니다.
2. 다양한 문자열 처리 함수를 사용할 수 있습니다.

                 SYSTEM CALLS
                 ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

#define NOFILE 128

struct process
  {
    tid_t tid;

    struct semaphore running;
    int exit_status;

    tid_t parent;

    struct file *executable;
    struct file *open_files[NOFILE];

    struct list_elem elem;
  };

static struct list process_list;

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?
process 자료구조에 open_files 배열로 현재 프로세스가 사용 중인 파일을 관리합니다.
open syscall이 호출되면 open_files 배열에서 비어있는 원소를 찾아서 그 원소의 인덱스를
file descriptor로 사용합니다. 그리고 open_files는 프로세스마다 별도로 관리되기
때문에, file descriptor는 process마다 고유합니다.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.
* read syscall
1. stack에서 fd, buffer, length 파라미터를 읽어옵니다.
2. fd의 유효한지 검사합니다.
2-1. 만약 fd가 유효하지 않은 경우 error로 실행 흐름을 이동합니다.
3. buffer와 buffer + length의 주소가 유효한지 검사합니다. (buffer + length를 검사하는 이유는
읽어온 데이터가 buffer를 초과할 수 도 있기 때문에)
3-1. buffer, buffer + length가 유효하지 않은 경우 exit (-1)를 호출하여 현재 사용자 프로세스를 종료시킵니다.
4. fd가 stdin이라면
4-1. 표준 입력으로부터 데이터를 읽어서 buffer에 저장합니다.
4-2. 읽어온 데이터의 바이트수를 반환합니다.
5. 그렇지 않고, 현재 프로세스의 open_files[fd]이 열려있다면
5-1. 파일 시스템에서 파일을 읽어온 다음에 읽은 바이트 수를 반환합니다.
6. -1을 반환 합니다. (실패 케이스)

* write syscall
1. stack에서 fd, data, length 파라미터를 읽어옵니다.
2. fd, data, data + length의 유효성을 검사합니다.
2-1. 하나라도 유효하지 않으면 -1을 반환합니다.
3. fd가 stdout인 경우
3-1. 표준 출력에 출력하고 출력한 바이트수를 반환합니다.
4. 그렇지 않고, 현재 프로세스의 open_files[fd]이 열려있다면
4-1. 파일 시스템에 해당 파일에 대해 쓰기를 요청하고 그 결과를 반환합니다.
5. -1을 반환합니다. (실패 케이스)

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?
메모리 복사 방식을 변경 (memcpy: double 또는 simd 구현)
각 바이트마다 페이지 테이블을 확인해야 되므로 최소 1번에서 최대 4096번까지 페이지 테이블을
검사해야합니다. 따라서 2바이트만 복사하는 경우에는 검사 횟수가 최대 2번까지로 줄어듭니다.
(chatgpt 답변 - 질문을 제대로 이해하지 못했습니다.)

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.
struct process에는 running이라는 세마포어를 통해 현재 프로스세가 실행 중 인지를 
나타내는 변수가 있습니다. 프로세스가 실행 중인 경우 running 세마포어의 값을 내리는
작업을 통해 프로세스가 끝날 때까지 대기할 수 있습니다. 프로세스가 종료되면 exit 시스템 콜에서
exit_status에 값을 기록하기 때문에, 대기 중인 프로세스에서 종료된 프로세스의 exit_status을
읽어올 수 있습니다. 그리고 wait을 통해 자식 프로세스의 exit_status를 읽어왔다면 
process_list에서 자식 프로세스 데이터를 해제합니다.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.
시스템 콜에서 user stack에 있는 값을 읽어올 때는 pop_stack 이라는 함수를 사용합니다.
여기서 stack에서 값을 읽어온 후에 stack이 유효한 지 검사를 하여 그렇지 않은 경우
exit (-1)을 호출하여 사용자 프로세스를 종료합니다.

write, read처럼 사용자가 넘겨준 메모리에 값을 읽거나 쓰는 경우에는 page_fault 인터럽트를
활용했습니다. page_fault interrupt는 사용자 프로세스가 자신에게 할당된 페이지 영역을
넘어서는 접근을 하는 경우에 발생합니다. 이때는 exit (-1)을 호출하고 여기서 사용자 프로세스가
사용 중인 자원을 해제하고 종료합니다.

저의 구현에서는 사용자 프로세스가 생성된 경우, process 구조체를 힙에 생성합니다. 그리고 
이 데이터는 wait 호출을 통해 삭제합니다. (부모 프로세스가 wait을 호출 하기 전에 자식 프로세스의
실행이 끝나는 경우가 있기 때문에 프로세스 실행이 종료되어도 남겨놓습니다.) 따라서 wait을
호출하지 않는 경우 메모리가 낭비될 가능성이 있습니다. 리눅스에서는 이러한 프로세스를 
"zombie process"라고 부르고 있습니다. 

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?
프로세스를 실행할 때, 스레드를 생성하는데 거기에 매개변수로 started 세마포어와
success 변수를 보냅니다. started 세마포어를 통해 프로그램 이미지를 메모리에 불러오는데
성공할 때까지 대기하고, success 변수에 성공여부를 전달받아서 실패한 경우, tid를 TID_ERROR로
설정합니다.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?
부모 프로세스가 자식 프로세스를 실행 시킨 다음, wait 시스템 콜을 호출하기 전에
자식 프로세스가 종료될 경우, 자식 프로세스의 exit_status를 얻어올 방법이 없습니다.
(이미 메모리에서 해제되어서 없기 때문에) 따라서 process 구조체는 사용자 프로세스가
시작할 때 malloc 함수를 통해 힙에 생성을 하고, 부모 프로세스가 wait 시스템 콜을
호출 할 때 exit_status 값을 읽어온 다음에 삭제를 합니다.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?
push_stack, pop_stack 함수를 사용해서 user memory에 접근을 하는데 이러한 방식은
코드 중복을 없애고, 유지 보수성을 높혀줍니다.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

-- advantages --
1. 프로세스별로 파일 디스크립터를 관리하기 때문에 다른 프로세스의 파일 디스크립터를
손상시킬 걱정을 하지 않아도 됩니다. 또한 파일을 열어서 읽을 때, 프로세스마다
별도의 offset을 갖게 되므로 읽고 쓰기가 편합니다.
2. 프로세스마다 파일 디스크립터를 생성하기 때문에 동기화를 신경쓰지 않아도 됩니다.

-- disadvantages --
1. 프로세스마다 파일 디스크립터 테이블이 필요하므로 메모리 사용량이 증가합니다.
2. 프로세스끼리 파일을 공유하기 어려울 수 있습니다.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?
하나의 프로세스가 여러개의 스레드를 갖게될 경우, 프로세스 아이디와 스레드 아이디를
분리하는 것이 좋은 구조일 수 있습니다. 예를 들면, 프로세스 내의 어떤 작업의 우선 순위를
높히고, 낮추는 세밀한 제어가 가능합니다. 

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
